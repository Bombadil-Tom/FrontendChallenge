{"version":3,"sources":["utils/checkWinner.js","containers/Board.js","common/Input.js","containers/BoardSize.js","containers/Instructions.js","common/Button.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","arr","size","length","countObj","forEach","num","field","i","hasOwnProperty","diagonallyLeft","diagonallyRight","count","j","horizontally","vertically","Board","_ref","boardSize","board","setField","gameOver","rows","cols","id","content","push","react_default","a","createElement","key","onClick","opacity","style","Input","value","onBlur","onChange","type","BoardSize","changeBoardSize","hideBoardSize","common_Input","Instructions","player","paddingTop","paddingBottom","height","concat","Button","title","_ref$disabled","disabled","checkWinner","require","App","_useState","useState","_useState2","Object","slicedToArray","showBoardSize","showSetBoardSize","_useState3","_useState4","setGameOver","_useState5","_useState6","setBoardSize","_useState7","_useState8","setPlayer","_useState9","_useState10","winner","setWinner","_useState11","_useState12","changeBoard","_useState13","_useState14","p1Fields","changeP1fields","_useState15","_useState16","p2Fields","changeP2fields","_useState17","_useState18","error","setError","handleClick","useEffect","gameStarted","textAlign","padding","fontSize","containers_Instructions","containers_Board","e","parseInt","target","toConsumableArray","common_Button","containers_BoardSize","newBoardSize","window","confirm","color","Boolean","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35b17ae4.chunk.js","sourcesContent":["const diagonallyLeft = (countObj, size) => {\n  let field = 0;\n\n  for (let i = 0; i < size; i++) {\n    if (!countObj.hasOwnProperty(field)) return false;\n    field += size + 1;\n  }\n\n  return true;\n};\n\nconst diagonallyRight = (countObj, size) => {\n  let field = size - 1;\n\n  for (let i = 0; i < size; i++) {\n    if (!countObj.hasOwnProperty(field)) return false;\n    field += size - 1;\n  }\n\n  return true;\n};\n\nconst vertically = (countObj, size) => {\n  for (let i = 0; i < size; i++) {\n    let count = 0,\n      field = i;\n\n    for (let j = 0; j < size; j++) {\n      if (countObj.hasOwnProperty(field)) count++;\n      field += size;\n    }\n\n    if (count === size) return true;\n  }\n\n  return false;\n};\n\nconst horizontally = (countObj, size) => {\n  for (let i = 0; i < size * size; i++) {\n    let count = 0;\n    for (let j = 0; j < size; j++) {\n      let field = j + i;\n      if (countObj.hasOwnProperty(field)) count++;\n    }\n\n    if (count === size) return true;\n    i += size - 1;\n  }\n\n  return false;\n};\n\nmodule.exports = (arr, size) => {\n  if (arr.length < size) return false;\n\n  const countObj = {};\n  arr.forEach(num => (countObj[num] = true));\n\n  if (diagonallyLeft(countObj, size)) return true;\n\n  if (diagonallyRight(countObj, size)) return true;\n\n  if (horizontally(countObj, size)) return true;\n\n  if (vertically(countObj, size)) return true;\n\n  return false;\n};\n","import React from \"react\";\nimport \"style/Board.css\";\n\nconst Board = ({ boardSize, board, setField, gameOver }) => {\n  const rows = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    const cols = [];\n\n    for (let j = 0; j < boardSize; j++) {\n      const id = boardSize * i + j;\n\n      const content = board[id] === null ? \"\" : board[id];\n\n      cols.push(\n        <td key={id} id={id} onClick={setField}>\n          {content}\n        </td>\n      );\n    }\n    rows.push(<tr key={i}>{cols}</tr>);\n  }\n\n  const opacity = gameOver ? 0.4 : 1;\n\n  return (\n    <table style={{ opacity }}>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst Input = ({ value, onBlur, onChange }) => (\n  <input type=\"number\" value={value} onChange={onChange} onBlur={onBlur} />\n);\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"common/Input\";\n\nconst BoardSize = ({ boardSize, changeBoardSize, hideBoardSize }) => {\n  return (\n    <div>\n      <Input\n        value={boardSize}\n        onChange={changeBoardSize}\n        onBlur={hideBoardSize}\n      />\n      Current Board Size: {boardSize} x {boardSize}\n    </div>\n  );\n};\n\nexport default BoardSize;\n","import React from \"react\";\n\nconst Instructions = ({ boardSize, player, gameOver }) => {\n  return (\n    <div style={{ paddingTop: \"15px\", paddingBottom: \"15px\" }}>\n      You need {boardSize} in a row (diagonally, horizontally or vertically) to\n      win.\n      <div style={{ paddingTop: \"25px\", height: \"50px\" }}>\n        {!gameOver && `Player ${player}'s turn`}\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\n\nconst Button = ({ title, onClick, disabled = false }) => (\n  <button onClick={onClick} disabled={disabled}>\n    {title}\n  </button>\n);\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"containers/Board\";\nimport BoardSize from \"containers/BoardSize\";\nimport Instructions from \"containers/Instructions\";\n\nimport Button from \"common/Button\";\n\nconst checkWinner = require(\"utils/checkWinner\");\n\nconst App = () => {\n  const [showBoardSize, showSetBoardSize] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [boardSize, setBoardSize] = useState(3);\n  const [player, setPlayer] = useState(1);\n  const [winner, setWinner] = useState(null);\n  const [board, changeBoard] = useState([]);\n  const [p1Fields, changeP1fields] = useState([]);\n  const [p2Fields, changeP2fields] = useState([]);\n  const [error, setError] = useState(null);\n\n  const handleClick = () => {\n    showSetBoardSize(!showBoardSize);\n    setError(null);\n  };\n\n  const changeBoardSize = e => {\n    const newBoardSize = parseInt(e.target.value, 10);\n\n    if (newBoardSize < 3) {\n      setError(\"Your value is too small, please choose one greater than 2.\");\n      return;\n    }\n    setError(null);\n\n    setBoardSize(newBoardSize);\n  };\n\n  const setField = e => {\n    if (gameOver) return setError(\"Game is over, please click restart.\");\n\n    const field = parseInt(e.target.id, 10);\n\n    if (board[field])\n      return setError(\"Field has already been set, please choose another.\");\n\n    setError(null);\n\n    if (player === 1) {\n      board[field] = \"X\";\n      setPlayer(2);\n      changeP1fields([...p1Fields, field]);\n    } else {\n      board[field] = \"O\";\n      setPlayer(1);\n      changeP2fields([...p2Fields, field]);\n    }\n  };\n\n  const handleRestart = () => {\n    if (!gameOver) {\n      if (p1Fields.length || p2Fields.length) {\n        const confirmText =\n          \"Game is not over yet, are you sure you want to restart?\";\n        if (!window.confirm(confirmText)) return;\n      }\n    }\n\n    changeBoard([]);\n    changeP1fields([]);\n    changeP2fields([]);\n    setGameOver(false);\n    setWinner(null);\n    setError(null);\n  };\n\n  useEffect(\n    () => {\n      if (player === 1 && checkWinner(p2Fields, boardSize)) {\n        setGameOver(true);\n        setWinner(2);\n        return;\n      } else if (player === 2 && checkWinner(p1Fields, boardSize)) {\n        setGameOver(true);\n        setWinner(1);\n        return;\n      }\n      if (p1Fields.length + p2Fields.length === boardSize * boardSize) {\n        setGameOver(true);\n        setError(\"Noone won. Please restart.\");\n        return;\n      }\n    },\n    [player, p1Fields, p2Fields, boardSize, winner]\n  );\n\n  const gameStarted = p1Fields.length || p2Fields.length;\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"15px\", fontSize: \"1.5em\" }}>\n      <Instructions boardSize={boardSize} player={player} gameOver={gameOver} />\n\n      <Board\n        boardSize={boardSize}\n        board={board}\n        setField={setField}\n        gameOver={gameOver}\n      />\n\n      <Button\n        onClick={handleClick}\n        disabled={gameStarted}\n        title={\"Change Board Size\"}\n      />\n\n      {showBoardSize && !gameStarted && (\n        <BoardSize\n          boardSize={boardSize}\n          changeBoardSize={changeBoardSize}\n          hideBoardSize={handleClick}\n        />\n      )}\n\n      <Button onClick={handleRestart} title={\"Restart Game\"} />\n\n      {winner && (\n        <div style={{ paddingTop: \"30px\", color: \"green\" }}>\n          Player {winner} won!!!\n        </div>\n      )}\n\n      {error && <div style={{ paddingTop: \"30px\", color: \"red\" }}>{error}</div>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"style/index.css\";\nimport App from \"containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}